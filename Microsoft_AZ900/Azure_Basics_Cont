Azure services

Compute and Networking Services

Virtual Machines
Azure RemoteApp
Azure Cloud Services
Azure Virtual Networks
Azure ExpressRoute
Traffic Manager

Storage and Backup Services

Azure Storage
Azure Import/Export Service
Azure Backup
Azure Site Recovery

Identity and Access Management Services

Azure Active Directory
Azure Multi-Factor Authentication

Application Services

Azure App Services
API Management
Notification Hubs
Event Hubs

Data and Analytics Services

SQL Database
HDInsightÂ®
Azure Redis Cache
Azure Machine Learning
DocumentDB
Azure Search

Media and Content Delivery Services

Azure Media Services
Azure CDN
Azure Service Bus

Azure Marketplace - an online applications and services marketplace that offers,

VM images and extensions
APIs and Applications
Machine Learning and Data services
VM Depot - a community-based catalog of open source virtual machine images that can be deployed directly from Azure.

GitHub - a web-based Git repository that is free to use for public and open source projects.

Azure Trust Center - offers guidelines for integrated security monitoring and policy management across Azure subscriptions. Also, it provides data security & data privacy guidelines essential to comply with regulatory controls.

Azure Deployment Models
Azure Service Management Model (ASM) using Classic Portal. This was the first approach that was introduced by Microsoft. Here the resources are coupled and can be deployed using ASM PowerShell Module.

Azure Resource Management Model (ARM) using New Portal. The resources are decoupled and hence can be configured independently. JSON templates provide simple orchestration and rollback functions. They have their own ARM PowerShell Module as well.

For example, while deploying a VM - compute, Vnet and storage resources are coupled in ASM, and hence can not be configured independently. Whereas with ARM, these resources are can be configured independently.

ARM is the recommended model of deployment and in this course, we align to this model.

Lab 1 : Azure Essentials - Creating storage account and uploading files into storage account  
Solution url : https://docs.microsoft.com/en-us/azure/storage/files/storage-how-to-use-files-cli

if [ -f /opt/get-azure ]; then /opt/get-azure && source ~/.azureenv; else curl -O https://gist.githubusercontent.com/frescoplaylab/a06df129432f55ad14779cd75461e6c6/raw/82be68f978af82219bc67db65fbb3eeabbc799a2/get_azure_credentials; . get_azure_credentials && source ~/.azureenv; fi

az login -u $username -p $password

Click the following command to make the resource group default, so that you need not use the resource group in the commands.
az configure --defaults group=$resource

Create Storage Account
az storage account create -n mystorageaccount -g MyResourceGroup -l westus --sku Standard_LRS 
(Create a storage account 'mystorageaccount' in resource group 'MyResourceGroup' in the West US region with locally redundant storage.)
az storage account create -n myfrescodemostorage -g $resource -l westus --sku Standard_LRS

eg : 
export storageAccountName="mystorageacct$RANDOM"

az storage account create \
    --resource-group $resourceGroupName \
    --name $storageAccountName \
    --location $region \
    --kind StorageV2 \
    --sku Standard_LRS \
    --enable-large-file-share \
    --output none

Get Storage Account Key
az storage account keys list -g $resource -n myfrescodemostorage
key=$(az storage account keys list -g $resource -n myfrescodemostorage --query [0].value -o tsv) (assign first key to a variable)

eg: 
export storageAccountKey=$(az storage account keys list \
    --resource-group $resourceGroupName \
    --account-name $storageAccountName \
    --query "[0].value" | tr -d '"')

create a variable
export storageAccountName="myfrescodemostorage"

Creating Azure File Share
shareName="myshare"

az storage share create \
    --account-name $storageAccountName \
    --account-key $key \
    --name $shareName 


Creating Directory

az storage directory create \
   --account-name $storageAccountName \
   --account-key $key \
   --share-name $shareName \
   --name "myDirectory" \
   --output none

Uploading the file

git clone https://github.com/Azure-Samples/php-docs-hello-world

cd file_path

az storage file upload \
    --account-name $storageAccountName \
    --account-key $key \
    --share-name $shareName \
    --source "index.php" \
    --path "myDirectory/index.php"

Deleting the resources

Clean up resources
az group delete --name $resource

Managing Resources

Here are the tools at your disposal to manage resources,

Azure PowerShell
ARM and ASM Portals
Azure CLI
Azure Rest APIs
Azure SDKs

Azure PowerShell provides a set of cmdlets for managing your Azure resources and for Automating the scheduled task.
Azure PowerShell Module can be installed in several different ways,

From PowerShell Gallery
Using MSI installer from the GitHub repository
Using Microsoft Web Platform Installer

Check if PowerShellGet is installed on your system using:

>Get-Module PowerShellGet -list | Select-Object Name,Version,Path
(If PowerShellGet is not installed, download it by executing below command).
Install-Module -Name PowerShellGet -Force
Exit

Install ARM Module
You can install Azure Resource Manager (ARM) modules from the PowerShell Gallery using:
Install-Module AzureRM
PowerShell gallery is not configured as a Trusted repository. Hence you will be prompted to "Allow installing modules from PSGallery". Choose 'Yes' or 'Yes to All' to continue.

Once installed, load the module in the PowerShell session using:

Import-Module AzureRM
Validate the installation by Checking the version of Azure PowerShell using:
Get-Module AzureRM -list | Select-Object Name,Version,Path

Install ASM module
For Classic mode use following command to install Azure PowerShell,
Install-Module Azure
and

Import-Module Azure
Validate the installation by Checking the version of Azure PowerShell using:
Get-Module Azure -list | Select-Object Name,Version,Path

ARM and ASM Portals
Azure Service Management (ASM) is the traditional way of provisioning Azure Resources. ASM portal, also called Classic Portal uses ASM API calls to provision and manage Azure resources.

Azure Resource Manager (ARM) is the service that is now more widely used to provision resources on Azure. The ARM Portal also called the New portal uses ARM API calls to provision resources. Also, when you use tools like Azure PowerShell, you are invoking ARM API calls.

Advantages of ARM
Resource Group - ARM groups resources, making it much easier to manage them.
Smarter Provisioning - ARM refers ARM templates to figure out resource requirement, dependencies and provisions resources optimally.
Role-based Access control(RBAC) - gives greater control by configuring role-based access control at resource and resource group levels.
Tags - can be applied to resources to logically organize all of the resources in the same subscription.
Billing - In an organization, costs can be viewed for the entire group or for a group of resources sharing the same tag.

ARM Templates
ARM templates are commonly used to automate deployment. Resource groups and resource properties like the size of DB, type of storage account are defined in these JSON documents.

ARM inspects requirements in ARM templates, figures out resource dependencies and provisions resources in an order or even simultaneously when there is no direct dependency between certain resources.

GitHub Resource Manager contains a number of Azure Quickstart Templates which can be used to build and deploy.

Another option is to create custom templates, using JSON Editor. Visual Studio or Visual Studio Code a lightweight, open-source editor can be used to create these templates. 

Azure CLI 2.0 is an open-source, cross-platform, shell-based command line interface for managing Azure resources.

You can use it in your browser with Azure Cloud Shell, or you can install it on macOS, Linux, and Windows and run it from the command line.

Commands are structured as:

>azure <topic> <verb> <options>
or
>az <topic> <verb> <options>
Example to list the virtual machines within an account
>azure vm list 
Example to create a resource group named "MyRG" in the centerus region of Azure
>az group create -n MyRG -l centerus 

Azure REST APIs
One of the most powerful ways to manage Azure is via the Azure REST APIs. Representational State Transfer (REST) APIs are service endpoints that support sets of HTTP operations (methods) to manage your resources.

It forms the connecting glue between your applications and Azure.

Azure SDKs
Azure SDKs provide a framework which you can use to build, deploy and manage various solutions and services you may need on Azure.

Azure VM

Azure Virtual Machines provides Scalable Computing Environment to host wide range Infra services and Applications.
Azure Virtual Machines follow Infrastructure as a Service (IaaS) model and lets you create VMs in the cloud. VM's are provisioned with:

Compute
Storage
Networking capabilities
Operating system

Azure VMs are best for workloads that:

Require High availability
Experience Unpredictable Growth
Experience Sudden Spikes

The first Step to creating VM is to choose the right VM size. Here are the various VM sizes that can cater to every kind of requirement.

General Purpose - ideal for Testing and Development.
Compute Optimized - recommended for medium traffic web servers and network appliances.
Memory Optimized - used for relational DB servers, medium to large caches, and for in-memory analytics.
Storage Optimized - used for Big Data, SQL, and NoSQL databases.
GPU - Ideal for heavy graphic rendering and video editing.
High Performance Compute - optimal for high-throughput network interfaces (RDMA).

Azure Marketplace provides a large image gallery, which includes:

Recent operating system images of Windows Server, Linux, and SQL Server.
You can also store your own images in Azure, by capturing an existing virtual machine and uploading the image.

Windows Server

Windows Server 2008 R2 and later versions are available in Azure Market Place.
Windows Server 2003 and later versions are supported for deployment. However, OS images must be uploaded from On-Premises.

Linux OS

Azure supports many Linux distributions and versions including CentOS, Core OS, Debian, Oracle Linux, Red Hat Enterprise Linux, and Ubuntu.
Microsoft does not support OS that is past their End of Support date without a Custom Support Agreement (CSA). For example, Windows Server 2003/2003 R2.

Basic steps for deploying a virtual machine

Select an image or disk to use for the new virtual machine from Azure Market Place.
Provide Required information such as hostname, username, and password for the new virtual machine.
Provide Optional information like domain membership, virtual networks, storage account, cloud service, and availability set.
Go ahead and provision the machine.

Lab 2 : Azure Essentials - Virtual Machine

Create an Azure VM

VmName="ExampleVm"
AdminPassword="ARe@11y5ecur3P@ssw0rd!"

az vm create \
    --resource-group $resource \
    --name $VmName \
    --image win2016datacenter \
    --admin-username azureuser \
    --admin-password $AdminPassword \
    --size Standard_B1s \
    --use-unmanaged-disk \
    --storage-sku Standard_LRS

List of VMs

az vm list

Stopping or Deleting the VM

az vm delete --resource-group $resource --name $VmName

Azure Virtual Network

Once you create a VM, you will need to place it in a virtual network to receive IP address configurations and to connect to other VMs or other resources that you create in Azure.

You can create Azure network resources by using either the ARM Portal, Classic Portal, Network Configuration File, Azure PowerShell module, Azure command-line interface (Azure CLI), or by using deployment templates.

You can attach multiple network interface cards (NICs) to each of your VMs.

Multiple NICs are used for many network virtual appliances and WAN Optimization solutions, as it provides high network traffic management capability, including isolation of traffic between a front-end NIC and back-end NIC(s).

Example - Palo alto Firewall appliance which contains 4 NICs for,
DMZ
Trusted Zone
Untrusted Zone
Firewall Management

Limitations of Multiple NICs
All VMs in a Availability set need to use either multi-NIC or single NIC. There cannot be a mixture of multi-NIC VMs and single NIC VMs within an availability set.

Once deployed, a VM with single NIC cannot be configured with multi NICs (and vice-versa), without deleting and re-creating it.

Network Security Groups

VMs can have connectivity to the Internet when public IP address is assigned to the VMs or to the cloud service. Under such scenarios, Network Security Group (NSG) provides advanced security protection for the VMs.

NSGs contain inbound and outbound rules that specify whether the traffic is approved or denied.

NSGs Rule can be applied at the following levels,

NIC (ARM deployment model)
VM (classic deployment)
All VMs in a Subnet (both deployment models)

Consider a requirement where Application Server should communicate with Internet (User) using HTTP Protocol only.

To achieve this, NSG1 - web-rule can be set to allow HTTP traffic to the FrontEnd subnet.
Also, assume a requirement where DataBase Server should not communicate with internet and it should get SQL traffic only from Application Server.

For this, NSG2 - DB Rule can be set as

sql-rule to allow SQL traffic only from the FrontEnd subnet.
web-rule to deny all internet bound traffic from the BackEnd subnet.

NSG Rule Properties
Name - is a unique identifier for the rule.
Direction - specifies whether the traffic is inbound or outbound.
Priority - If multiple rules match the traffic, rules with higher priority apply.
Access - specifies whether the traffic is allowed or denied.
Source IP address prefix - identifies from where traffic originates.
Source port range - specifies source ports.
Destination IP address prefix - identifies the traffic destination IP range
Destination port range - specifies destination ports
Protocol - specifies a protocol that matches the rule.

Things to Remember
By default 100 NSGs can be created per region per subscription. This can be extended to 400 by contacting Azure support.

A single NSG can have 200 rules which can be raised to 500 by contacting Azure support.

Only one NSG can be applied to a VM, subnet, or NIC. However, the same NSG can be applied to multiple resources




